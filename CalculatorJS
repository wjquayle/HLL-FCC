// Initialize the variable with the starting value (800)
let range = 800;
let mil = 812;
let state = 1;
const statesCount = 4;

// Define your calculation functions here
// For example:
function calculateMil(state, range) {
  // Implement the calculation based on the current state
  // and the range value
  if (state == 1) {
    //american state
    mil = (1002-(range/4.225))
  }
  else if  (state == 2){
    //german
    mil = (1002-(range/4.225))
  }
  else if  (state == 3){
    //soviet
    mil = (1142-(range/4.615)
  }
  else if  (state == 4){
    //UK
    mil = (550-(A3/5.7692))
  }


function updateMil() {
  mil = calculateMil(state, range);
}

function handleButtonPress(buttonIndex) {
  const increments = [1, 5, 10, 50, 100, 500, 1000];

  if (buttonIndex < 7) {
    // Positive values
    range += increments[buttonIndex];
  } else if (buttonIndex < 14) {
    // Negative values
    range -= increments[buttonIndex - 7];
  } else if (buttonIndex === 14) {
    // The 8 key, switch to the next state
    state = (state % statesCount) + 1;
  }

  updateMil();
  // Update the Stream Deck button graphics here based on the state and range values
  // You'll need to use the Stream Deck SDK functions to update button images.
}

// Set up button event listeners
streamDeck.on('down', (buttonIndex) => {
  handleButtonPress(buttonIndex);
});



/* OLD CODE
function calculateElevation(range,isRussian) {
    if (range >= 100 && range <= 1600) {
        if(isRussian){
            var elevation = (-16/75)*range+1141+1/3;
            return elevation;
        }else{
            var elevation = (range-4224.25)/-4.21781;
            return elevation;
        }
    } else {
        return "Invalid range. Please enter a value between 100 and 1600 meters.";
    }
}

while (true) {
    var isRussian = confirm("Are you using Russian artillery?");
    var range = prompt("Enter the range in meters (between 100 and 1600):");
    if (range === null) {
        break;
    } else {
        console.log("Elevation for artillery fire: " + calculateElevation(range,isRussian) + " degrees.");
    }
}
*/
